#Wall bouncing system bugged! Sometimes bounces back at paddle.

import pygame, time, sys, random, math
import pygame.freetype

WHITE = (255, 255, 255)

pygame.init()
pygame.font.init()
screen = pygame.display.set_mode((1300,600))
my_font = pygame.font.SysFont('Consolas', 60)
my_font2 = pygame.font.SysFont('Consolas', 20)
pygame.display.set_caption('Escalate')

Left = 0
moving = 1
initial_ball_angle = 180
ball_rad = 10
ball_speed = 2

player_width = 20
player_length = 120

single = 0
Menu = 1
started = False
start_timer = 0

time_val = 2


def angle_math(angle):
    core = angle

    if core >= 0 and core < 90:
        difference = (90 - core) * 2
        return int(difference)

    elif core >= 90 and core <= 180:
        difference2 = (180 - core) * 2
        return int(difference2)

    elif core >= 180 and core <= 270:
        difference3 = (270 - core) * 2
        return int(difference3)

    elif core >= 270 and core <= 360:
        difference4 = (360 - core) * 2
        return int(difference4)


def ang_paddles(widest_point, option, midpoint_num, midpoint_length, hit):

    if option == 1:
        if midpoint_length >= hit:
            difference = midpoint_length - hit
            increment = (90 - widest_point)/midpoint_num
            degrees_deviation = difference * increment
            scaled_num = degrees_deviation
            return scaled_num
        if midpoint_length <= hit:
            difference = hit - midpoint_length
            increment2 = (90 - widest_point)/midpoint_num
            degrees_deviation2 = difference * increment2
            scaled_num2 = 360 - degrees_deviation2
            return scaled_num2

    elif option == 2:
        if midpoint_length >= hit:
            difference = midpoint_length - hit
            increment3 = (90 - widest_point)/midpoint_num
            degrees_deviation3 = difference * increment3
            scaled_num3 = 180 - degrees_deviation3
            return scaled_num3
        if midpoint_length <= hit:
            difference = hit - midpoint_length
            increment4 = (90 - widest_point)/midpoint_num
            degrees_deviation4 = difference * increment4
            scaled_num4 = 180 + degrees_deviation4
            return scaled_num4


class Player1:
    def __init__(self, x, y, r, g, b, width, height, w, spd):
        self.x = x
        self.y = y
        self.r = r
        self.g = g
        self.b = b
        self.width = width
        self.height = height
        self.w = w
        self.spd = spd

    def display_p(self):

        pygame.draw.rect(screen, (self.r, self.g, self.b), (int(self.x), int(self.y), self.width, self.height), self.w)

    def move(self):
        key = pygame.key
        pygame.event.pump()

        if key.get_pressed()[pygame.K_a] and self.y > 0:
            self.y -= self.spd
        if key.get_pressed()[pygame.K_d] and self.y < 600-self.height:
            self.y += self.spd


class Player2:
    def __init__(self, x, y, r, g, b, width, height, w, spd2):
        self.x = x
        self.y = y
        self.r = r
        self.g = g
        self.b = b
        self.width = width
        self.height = height
        self.w = w
        self.spd2 = spd2

    def display_p(self):
        pygame.draw.rect(screen, (self.r, self.g, self.b), (int(self.x), int(self.y), self.width, self.height), self.w)

    def move(self):
        key = pygame.key
        pygame.event.pump()

        if key.get_pressed()[pygame.K_RIGHT] and self.y > 0:
            self.y -= self.spd2
        if key.get_pressed()[pygame.K_LEFT] and self.y < 600-self.height:
            self.y += self.spd2


player_list = []
PL1 = Player1(0, 300, 0, 0, 255, player_width, player_length, 0, 2)
PL2 = Player2(1280, 300, 0, 0, 255, player_width, player_length, 0, 2)
player_list.append(PL1)
player_list.append(PL2)

transfer_x1 = PL1.x
transfer_y1 = PL1.y
transfer_x2 = PL2.x
transfer_y2 = PL2.y


class MainBall:
    def __init__(self, x11, y11, r, g, b, ra, w, angle, spd2):
        self.x11 = x11
        self.y11 = y11
        self.r = r
        self.g = g
        self.b = b
        self.ra = ra
        self.w = w
        self.angle = angle
        self.spd2 = spd2

    def display_circle(self):
        pygame.draw.circle(screen, (self.r, self.g, self.b), (int(self.x11), int(self.y11)), self.ra, self.w)

    def move_circle(self, Player1, Player2):
        global moving, player_length, ball_rad, Left, single, start_timer, time_val
        key = pygame.key
        pygame.event.pump()

        inst_x1 = Player1.x
        inst_y1 = Player1.y
        inst_x2 = Player2.x
        inst_y2 = Player2.y

        # -moving toggle ---

        if moving == 2:
            if key.get_pressed()[pygame.K_i]:
                moving -= 1
        if moving == 1:
            if key.get_pressed()[pygame.K_k]:
                moving += 1

        # --------

        # -angle bounce physics ---

        # -for walls
        if self.angle > 360:
            self.angle = self.angle % 360

        if self.y11-ball_rad < 0 or self.y11+ball_rad > 600:
                ang = angle_math(self.angle)
                untrue = self.angle + ang + 180
                if self.angle > 90 and self.angle < 180:
                    self.angle = (untrue%360) + 180
                if self.angle >= 180 and self.angle <= 360 or self.angle >= 0 and self.angle <= 90:
                    self.angle = untrue%360

        if self.x11 - ball_rad < 0 or self.x11 + ball_rad > 1300:
            self.x11 = self.x11 - self.x11 + 650
            self.y11 = self.y11 - self.y11 + 300
            if self.angle <= 90 and self.angle >= 270:
                self.angle = 0
            if self.angle >= 180 and self.angle <= 360:
                self.angle = 180

        # ---

        # -for paddles
        if self.x11-ball_rad < 20 and self.y11 + ball_rad > inst_y1 and self.y11 - ball_rad < inst_y1 + player_length:
            if self.angle > 360:
                self.angle = self.angle % 360
            self.angle = ang_paddles(30, 1, player_length/2, inst_y1 + (player_length/2), self.y11)
            if Left == 0:
                    Left = Left + 1

        if self.x11+ball_rad > 1280 and self.y11 + ball_rad > inst_y2 and self.y11 - ball_rad < inst_y2 + player_length:
            if self.angle > 360:
                self.angle = self.angle % 360
            self.angle = ang_paddles(30, 2, player_length/2, inst_y2 + (player_length / 2), self.y11)
            if Left == 1:
                    Left = Left - 1

        # ---

        angle1 = math.radians(self.angle)

        # --------

        # -ball moving math ---

        if moving == 2:
            self.x11 += math.cos(angle1) * self.spd2
            self.y11 -= math.sin(angle1) * self.spd2

        # -------

r1 = 0
r2 = 0
r3 = 0

ball = MainBall(650, 300, 0, 150, 200, ball_rad, 0, initial_ball_angle, ball_speed)


def starting():
    global Menu, started, r1, r2, r3
    pygame.event.pump()
    key = pygame.key

    title = my_font.render('E S C A L A T E', False, (23, 0, 45))
    start = my_font2.render('S T A R T', False, (r1, r2, r3))
    intro = my_font2.render('I N T R O', False, (23, 0, 45))

    mouse = pygame.mouse
    x = mouse.get_pos()[0]
    y = mouse.get_pos()[1]

    screen.fill(WHITE)
    screen.blit(title, (402.5, 100))
    screen.blit(start, (600.5, 300))
    screen.blit(intro, (600.5, 355))

    if Menu == 1:
        if started == True:
                Menu += 1

    if x >= 600.5 and x <= 699.5 and y >= 300 and y <= 321:
        if r1 < 200:
            r1 += 4
        if r2 < 200:
            r2 += 4
        if r3 < 250:
            r3 += 6
    else:
        if r1 > 1:
            r1 -= 2
        if r2 > 1:
            r2 -= 2
        if r3 > 1:
            r3 -= 3



pygame.display.flip()

while 1:

    mouse = pygame.mouse
    x = mouse.get_pos()[0]
    y = mouse.get_pos()[1]

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        if event.type == pygame.MOUSEBUTTONDOWN and x >= 600.5 and x <= 699.5 and y >= 300 and y <= 321:
                started = True

    if Menu == 1:
        starting()

    if Menu == 2:
        screen.fill(WHITE)
        for player in player_list:
            player.display_p()
            player.move()

        ball.display_circle()
        ball.move_circle(PL1, PL2)

    pygame.display.update()
